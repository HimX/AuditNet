// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("Entities.Models.Audit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AuditPlanId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommentPageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuditPlanId");

                    b.HasIndex("CommentPageId");

                    b.ToTable("Audits");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80abbca8-664d-4b20-b5de-024705497d4a"),
                            AuditPlanId = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Description = "First audit description",
                            StartDate = new DateTime(2022, 10, 10, 18, 29, 20, 751, DateTimeKind.Local).AddTicks(2441),
                            State = 0,
                            Title = "First audit"
                        },
                        new
                        {
                            Id = new Guid("86dba8c0-d178-41e7-938c-ed49778fb52a"),
                            AuditPlanId = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Description = "Second audit description",
                            StartDate = new DateTime(2022, 10, 10, 18, 29, 20, 751, DateTimeKind.Local).AddTicks(2454),
                            State = 0,
                            Title = "Second audit"
                        });
                });

            modelBuilder.Entity("Entities.Models.AuditPerson", b =>
                {
                    b.Property<Guid>("AuditId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.HasKey("AuditId", "PersonId");

                    b.HasIndex("PersonId");

                    b.HasIndex("AuditId", "PersonId")
                        .IsUnique();

                    b.ToTable("AuditPerson");
                });

            modelBuilder.Entity("Entities.Models.AuditPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommentPageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CommentPageId");

                    b.ToTable("AuditPlans");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9d4c053-49b6-410c-bc78-2d54a9991870"),
                            Description = "First plan description",
                            Title = "First plan"
                        },
                        new
                        {
                            Id = new Guid("3d490a70-94ce-4d15-9494-5248280c2ce3"),
                            Description = "Second plan description",
                            Title = "Second plan"
                        });
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommentPageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CommentPageId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entities.Models.CommentPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CommentPages");
                });

            modelBuilder.Entity("Entities.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Entities.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AuditId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CommentPageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuditId");

                    b.HasIndex("CommentPageId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Entities.Models.Audit", b =>
                {
                    b.HasOne("Entities.Models.AuditPlan", null)
                        .WithMany("Audits")
                        .HasForeignKey("AuditPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.CommentPage", "CommentPage")
                        .WithMany()
                        .HasForeignKey("CommentPageId");

                    b.Navigation("CommentPage");
                });

            modelBuilder.Entity("Entities.Models.AuditPerson", b =>
                {
                    b.HasOne("Entities.Models.Audit", "Audit")
                        .WithMany("AuditPersons")
                        .HasForeignKey("AuditId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Person", "Person")
                        .WithMany("AuditPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Audit");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Entities.Models.AuditPlan", b =>
                {
                    b.HasOne("Entities.Models.CommentPage", "CommentPage")
                        .WithMany()
                        .HasForeignKey("CommentPageId");

                    b.Navigation("CommentPage");
                });

            modelBuilder.Entity("Entities.Models.Comment", b =>
                {
                    b.HasOne("Entities.Models.CommentPage", null)
                        .WithMany("Comments")
                        .HasForeignKey("CommentPageId");
                });

            modelBuilder.Entity("Entities.Models.Schedule", b =>
                {
                    b.HasOne("Entities.Models.Audit", null)
                        .WithMany("Schedules")
                        .HasForeignKey("AuditId");

                    b.HasOne("Entities.Models.CommentPage", "CommentPage")
                        .WithMany()
                        .HasForeignKey("CommentPageId");

                    b.Navigation("CommentPage");
                });

            modelBuilder.Entity("Entities.Models.Audit", b =>
                {
                    b.Navigation("AuditPersons");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("Entities.Models.AuditPlan", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("Entities.Models.CommentPage", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Entities.Models.Person", b =>
                {
                    b.Navigation("AuditPersons");
                });
#pragma warning restore 612, 618
        }
    }
}
